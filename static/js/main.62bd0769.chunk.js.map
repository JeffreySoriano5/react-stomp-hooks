{"version":3,"sources":["../../src/context/StompContext.js","../../src/components/StompSessionProvider.js","../../src/hooks/useSubscription.js","../../src/hooks/useStompClient.js","App.js","../../src/hoc/withStompClient.js","../../src/hoc/withSubscription.js","index.js"],"names":["StompContext","createContext","StompSessionProvider","props","url","children","stompClientOptions","stompOptions","useState","client","setClient","subscriptionRequests","useRef","useEffect","_client","parsedUrl","URL","window","WebSocket","Error","frame","value","Object","subscribe","destination","callback","headers","subscriptionId","Math","subscriptionRequest","subscriptionData","useSubscription","destinations","onMessage","stompContext","useContext","_destinations","Array","cleanUpFunctions","_cleanUpFunction","useStompClient","Subscribing","lastMessage","setLastMessage","message","body","Box","SendingMessages","input","setInput","stompClient","Grid","container","direction","spacing","item","Button","variant","onClick","publish","TextField","onChange","event","target","Typography","HigherOrderComponents","WrappedComponent","withStompClient","React","Component","constructor","super","this","state","handleChange","bind","sendMessage","setState","render","ref","Showcase","Accordion","style","margin","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","aria-controls","id","title","AccordionDetails","App","debug","str","console","log","CssBaseline","Container","Card","CardContent","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.62bd0769.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nconst StompContext = createContext(undefined)\n\nexport default StompContext\n","import React, { useEffect, useRef, useState } from 'react'\nimport StompContext from '../context/StompContext'\nimport SockJS from 'sockjs-client'\nimport { Client } from '@stomp/stompjs'\n\n/**\n * The StompSessionProvider manages the STOMP connection\n * All Hooks and HOCs in this library require an ancestor of this type.\n * The URL to connect to can be specified via the url prop.\n * Depending on the Schema of the URL either Sockjs or a raw Websocket is used.\n * You can override this behavior with the brokerURL or webSocketFactory props, which will then be forwarded to @stomp/stompjs\n * Custom @stomp/stompjs options can be used as props.\n * Please consult the @stomp/stompjs documentation for more information.\n */\nfunction StompSessionProvider(props) {\n  let { url, children, stompClientOptions, ...stompOptions } = props\n\n  // Support old API\n  if (stompClientOptions) stompOptions = stompClientOptions\n\n  const [client, setClient] = useState(undefined)\n  const subscriptionRequests = useRef(new Map())\n\n  useEffect(() => {\n    const _client = new Client(stompOptions)\n\n    if (!stompOptions.brokerURL && !stompOptions.webSocketFactory) {\n      _client.webSocketFactory = function () {\n        const parsedUrl = new URL(url, window?.location?.href)\n        if (parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:') {\n          return new SockJS(url)\n        } else if (\n          parsedUrl.protocol === 'ws:' ||\n          parsedUrl.protocol === 'wss:'\n        ) {\n          return new WebSocket(url)\n        } else throw new Error('Protocol not supported')\n      }\n    }\n\n    _client.onConnect = function (frame) {\n      if (stompOptions.onConnect) stompOptions.onConnect(frame)\n\n      subscriptionRequests.current.forEach((value) => {\n        value.subscription = _client.subscribe(\n          value.destination,\n          value.callback,\n          value.headers\n        )\n      })\n    }\n\n    if (!stompOptions.onStompError) {\n      _client.onStompError = function (frame) {\n        throw frame\n      }\n    }\n\n    _client.activate()\n    setClient(_client)\n\n    return () => _client.deactivate()\n  }, [url, ...Object.values(stompOptions)])\n\n  const subscribe = (destination, callback, headers = {}) => {\n    const subscriptionId = Math.random().toString(36).substr(2, 9)\n    const subscriptionRequest = {\n      destination,\n      callback,\n      headers\n    }\n\n    subscriptionRequests.current.set(subscriptionId, subscriptionRequest)\n\n    if (client && client.connected) {\n      subscriptionRequest.subscription = client.subscribe(\n        destination,\n        callback,\n        headers\n      )\n    }\n\n    return () => {\n      const subscriptionData = subscriptionRequests.current.get(subscriptionId)\n\n      if (subscriptionData.subscription) {\n        subscriptionData.subscription.unsubscribe()\n      }\n\n      subscriptionRequests.current.delete(subscriptionId)\n    }\n  }\n\n  return (\n    <StompContext.Provider\n      value={{\n        client,\n        subscribe\n      }}\n    >\n      {children}\n    </StompContext.Provider>\n  )\n}\n\nexport default StompSessionProvider\n","import { useContext, useEffect } from 'react'\nimport StompContext from '../context/StompContext'\n\n/**\n *\n * @param destinations The destinations to subscribe to. Can be a string for a single destination or an array of strings for multiple.\n * @param onMessage Callback called when a message arrives for this subscription\n * @param headers Additional Headers for this subscription, consult @stomp/stompjs docs.\n */\nfunction useSubscription(destinations, onMessage, headers = {}) {\n  const stompContext = useContext(StompContext)\n  const _destinations = Array.isArray(destinations)\n    ? destinations\n    : [destinations]\n\n  useEffect(() => {\n    const cleanUpFunctions = []\n\n    _destinations.forEach((_destination) =>\n      cleanUpFunctions.push(\n        stompContext.subscribe(_destination, onMessage, headers)\n      )\n    )\n\n    return () => {\n      cleanUpFunctions.forEach((_cleanUpFunction) => {\n        _cleanUpFunction()\n      })\n    }\n  }, [...Object.values(_destinations), ...Object.values(headers)])\n}\n\nexport default useSubscription\n","import { useContext } from 'react'\nimport StompContext from '../context/StompContext'\n\n/**\n * Returns the Stomp Client from @stomp/stompjs\n */\nfunction useStompClient() {\n  return useContext(StompContext).client\n}\n\nexport default useStompClient\n","import React, { useState } from \"react\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport {\n  StompSessionProvider,\n  useStompClient,\n  useSubscription,\n  withStompClient,\n  withSubscription\n} from \"react-stomp-hooks\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst App = () => {\n  return (\n    //Initialize Stomp connection, will use sockjs, as the protocol specified is https\n    //The Connection can be used by all child components via the hooks or hocs.\n    <StompSessionProvider\n      url={\"https://stream.elite12.de/api/sock\"}\n      //All options supported by @stomp/stompjs can be used here\n      debug={(str) => {\n        console.log(str);\n      }}\n    >\n      <CssBaseline />\n      <Container>\n        <Card style={{ margin: \"3em\" }} variant=\"outlined\">\n          <CardContent>\n            <Typography>You can see the STOMP Messages send and received in the browser console</Typography>\n            <Typography>Note that, because the components are unmounted when the accordion is unexpanded, all subscriptions are removed when you close the accordion.</Typography>\n          </CardContent>\n        </Card>\n        <Showcase title={\"Subscribing\"}><Subscribing /></Showcase>\n        <Showcase title={\"Sending Messages\"}><SendingMessages /></Showcase>\n        <Showcase title={\"Higher Order Components\"}><HigherOrderComponents /></Showcase>\n      </Container>\n    </StompSessionProvider>\n  );\n};\n\nfunction Subscribing() {\n  const [lastMessage, setLastMessage] = useState(\"No message received yet\");\n\n  //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n  useSubscription(\"/topic/test\", (message) => setLastMessage(message.body));\n\n  return (\n    <Box>Last Message: {lastMessage}</Box>\n  );\n}\n\nfunction SendingMessages() {\n  const [input, setInput] = useState(\"\");\n  const [lastMessage, setLastMessage] = useState(\"No message received yet\");\n\n  //Get Instance of StompClient\n  //This is the StompCLient from @stomp/stompjs\n  const stompClient = useStompClient();\n  useSubscription(\"/user/queue/echoreply\", (message) => setLastMessage(message.body));\n\n  const sendMessage = () => {\n    //Send Message\n    stompClient.publish({\n      destination: \"/app/echo\",\n      body: \"Echo \" + input\n    });\n  };\n\n  return (\n    <Grid container direction=\"row\" spacing={3}>\n      <Grid item><Button variant={\"contained\"} onClick={sendMessage}>Send Message</Button></Grid>\n      <Grid item><TextField variant=\"standard\" value={input}\n                            onChange={(event => setInput(event.target.value))} /></Grid>\n      <Grid item>\n        <Typography variant={\"body1\"}>\n          Last Message received: {lastMessage}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst HigherOrderComponents = withStompClient(withSubscription(\n  class HOCDemo extends React.Component {\n\n    constructor(props) {\n      super(props);\n\n      //stompCLient property is injected in the withStompClient HOC\n      this.stompClient = props.stompClient;\n      this.state = {\n        input: \"\",\n        lastMessage: \"No message received yet\"\n      };\n\n      this.handleChange = this.handleChange.bind(this);\n      this.sendMessage = this.sendMessage.bind(this);\n      this.onMessage = this.onMessage.bind(this);\n    }\n\n    //You have to specify an onMessage method for the withSubscription HOC.\n    onMessage(message) {\n      this.setState({\n        lastMessage: message.body\n      });\n    }\n\n    sendMessage() {\n      this.stompClient.publish({\n        destination: \"/app/echo\",\n        body: \"Echo \" + this.state.input\n      });\n    }\n\n    handleChange(event) {\n      this.setState({\n        input: event.target.value\n      });\n    }\n\n    render() {\n      return (\n        <Grid container direction=\"row\" spacing={3}>\n          <Grid item><Button variant={\"contained\"} onClick={this.sendMessage}>Send Message</Button></Grid>\n          <Grid item><TextField variant=\"standard\" value={this.state.input} onChange={this.handleChange} /></Grid>\n          <Grid item>\n            <Typography variant={\"body1\"}>\n              Last Message received: {this.state.lastMessage}\n            </Typography>\n          </Grid>\n        </Grid>\n      );\n    }\n  }, \"/user/queue/echoreply\")\n);\n\nfunction Showcase(props) {\n  return (\n    <Accordion style={{ margin: \"3em\" }} TransitionProps={{ unmountOnExit: true }}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>{props.title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        {props.children}\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport useStompClient from '../hooks/useStompClient'\n\nfunction withStompClient(WrappedComponent) {\n  return (props) => {\n    const stompClient = useStompClient()\n    return <WrappedComponent stompClient={stompClient} {...props} />\n  }\n}\n\nexport default withStompClient\n","import React, { useRef } from 'react'\nimport useSubscription from '../hooks/useSubscription'\n\nfunction withSubscription(WrappedComponent, destinations, headers = {}) {\n  return (props) => {\n    const ref = useRef()\n    useSubscription(\n      destinations,\n      (message) => ref.current.onMessage(message),\n      headers\n    )\n    return <WrappedComponent ref={ref} {...props} />\n  }\n}\n\nexport default withSubscription\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}